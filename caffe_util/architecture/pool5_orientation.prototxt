layer {
  name: "dummy"
  type: "DummyData"
  top: "data"
  top: "label"
  dummy_data_param {
    shape { dim: 10 dim: 9216 }
    shape { dim: 10}
  }
}

layer {
  name: "fc1"
  type: "InnerProduct"
  bottom: "data"
  top: "fc1"
  
  # learning rate and decay multipliers for the weights
  param { lr_mult: 0 decay_mult: 0 }
  # learning rate and decay multipliers for the biases
  param { lr_mult: 0 decay_mult: 0 }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "gaussian"
      std: 0.0001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  } 
}

layer {
	name: "relu1"
	type: "ReLU"
	bottom: "fc1"
	top: "relu1"
}

layer {
  name: "fc2"
  type: "InnerProduct"
  bottom: "data"
  top: "fc2"
  
  # learning rate and decay multipliers for the weights
  param { lr_mult: 1 decay_mult: 1 }
  # learning rate and decay multipliers for the biases
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "gaussian"
      std: 0.0001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
	name: "relu2"
	type: "ReLU"
	bottom: "fc2"
	top: "relu2"
}

layer {
  name: "concat"
  bottom: "relu1"
  bottom: "relu2"
  top: "concat"
  type: "Concat"
  concat_param {
    axis: 1
  }
}

layer {
  name: "fc3"
  type: "InnerProduct"
  bottom: "concat"
  top: "fc3"
  
  # learning rate and decay multipliers for the weights
  param { lr_mult: 1 decay_mult: 1 }
  # learning rate and decay multipliers for the biases
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output: 3
    weight_filler {
      type: "gaussian"
      std: 0.0001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  type: "SoftmaxWithLoss"
  bottom: "fc3"
  bottom: "label"
  top: "loss"
}